{
	"info": {
		"_postman_id": "9b7463af-2a74-41f8-868e-ca954d738a6f",
		"name": "HCISS-UMicroservices-Kafka-K8",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "admin",
			"item": [
				{
					"name": "api/user",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluQGhjaXNzLmlvIiwicm9sZSI6InVzZXIiLCJpYXQiOjE2NDc1Mjg5NzIsImV4cCI6MTY0NzUzMjU3Mn0.X4D6TXE7OVn4NhY5hjlWEcW25AtfB_DlYIINY91VagY",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user"
							]
						},
						"description": "``` javascript\n/**\n * @api {get} /users /users/account /users/profile\n * @apiName Show Profile - if user.role == admin, list all;\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiHiddenParam {String} password\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiSuccess (200) {Object} mixed `User` object(s) -> user.role == admin, list all\n * @apiError (200) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "/auth",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin@hciss.io",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth"
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /auth Auth user\n * @apiName Auth users\n * @apiPermission JWT / 720 seconds / Active Session - no paralel use\n * @apiGroup User\n *\n * @apiParam  {String} [userName] username\n * @apiParam  {String} [email] password\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:100 JWT 12 minutes\n * \n * @apiSuccess (200) {Object} mixed `JWT token` object\n * @apiError (401) {Object} {status: false, message: message}\n **/\n\n\n```"
					},
					"response": []
				},
				{
					"name": "api/user/update/:user_id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/user/update/:user_id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"user",
								"update",
								":user_id"
							],
							"variable": [
								{
									"key": "user_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n\n/**\n * @api {put} /users/update:user_id\n * @apiName Update user - if user.role == admin, possible to update all;\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} [password] password - auto hash when update\n * @apiImmutableParam  {String} [role] enum [user, admin] from Schema immutable:true/false\n * @apiImmutableParam {String} [username] username from Schema immutable:true/false\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiFixing if user_id is different then the authenticated user's id,\n * ignoring the user_id parameter and continue with user own id.{userid = username from JWTtoken}\n *\n * @apiSuccess (200) {Object} mixed `User` object\n * @apiError (200) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "api/topics",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluQGhjaXNzLmlvIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjQ4MDMwMDA2LCJleHAiOjE2NDgwNjYwMDZ9.QljtZvKkXlHqBWmCVXh3F3FgErQsFrs6ODn1kn0tkgU",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluQGhjaXNzLmlvIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjQ3NTM1NjA1LCJleHAiOjE2NDc1NzE2MDV9.v7vTlvKk4kaXpEGtOWX0WTiLE2E7a-W-hwRSIZ5HOUM",
									"type": "text"
								},
								{
									"key": "topic",
									"value": "trade_anormalies_topic",
									"type": "text"
								},
								{
									"key": "client",
									"value": "kafka_anormalies_client",
									"type": "text"
								},
								{
									"key": "broker",
									"value": "localhost:9092",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://rest.hciss.io:5000/api/topics",
							"protocol": "http",
							"host": [
								"rest",
								"hciss",
								"io"
							],
							"port": "5000",
							"path": [
								"api",
								"topics"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "api-gateway",
			"item": [
				{
					"name": "api/user",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluQGhjaXNzLmlvIiwicm9sZSI6InVzZXIiLCJpYXQiOjE2NDc1Mjg5NzIsImV4cCI6MTY0NzUzMjU3Mn0.X4D6TXE7OVn4NhY5hjlWEcW25AtfB_DlYIINY91VagY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluQGhjaXNzLmlvIiwicm9sZSI6InVzZXIiLCJpYXQiOjE2NDc1Mjg5NzIsImV4cCI6MTY0NzUzMjU3Mn0.X4D6TXE7OVn4NhY5hjlWEcW25AtfB_DlYIINY91VagY",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://localhost:5001/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"user"
							]
						},
						"description": "``` javascript\n/**\n * @api {get} /users /users/account /users/profile\n * @apiName Show Profile - if user.role == admin, list all;\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiHiddenParam {String} password\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiSuccess (200) {Object} mixed `User` object(s) -> user.role == admin, list all\n * @apiError (200) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "/user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin@hciss.io",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5001/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"user"
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /user /register Create user\n * @apiName Create new users\n * @apiPermission Registration\n * @apiGroup User\n *\n * @apiParam  {String} [userName] username unique\n * @apiParam  {String} [email] password\n * @apiParam  {String} [role] enum [seller, buyer] from Schema\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:100 JWT 12 minutes\n * \n * @apiSuccess (200) {Object} mixed `User` object -> @apiHiddenParam {String} password\n * @apiError (200) {Object} {status: false, message: message}\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "/register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "testuser",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5001/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"user"
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /user /register Create user\n * @apiName Create new users\n * @apiPermission Registration\n * @apiGroup User\n *\n * @apiParam  {String} [userName] username unique\n * @apiParam  {String} [email] password\n * @apiParam  {String} [role] enum [seller, buyer] from Schema\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:100 JWT 12 minutes\n * \n * @apiSuccess (200) {Object} mixed `User` object -> @apiHiddenParam {String} password\n * @apiError (200) {Object} {status: false, message: message}\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "/auth",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluQGhjaXNzLmlvIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjQ4MjI0ODk0LCJleHAiOjE2NDgyMjg0OTR9.f3SPAHIe18AWJ5JOXemr3t64GyZrv9NlASncEXv1J2w",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin@hciss.io",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://rest.hciss.io:5001/auth",
							"protocol": "http",
							"host": [
								"rest",
								"hciss",
								"io"
							],
							"port": "5001",
							"path": [
								"auth"
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /auth Auth user\n * @apiName Auth users\n * @apiPermission JWT / 720 seconds / Active Session - no paralel use\n * @apiGroup User\n *\n * @apiParam  {String} [userName] username\n * @apiParam  {String} [email] password\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:100 JWT 12 minutes\n * \n * @apiSuccess (200) {Object} mixed `JWT token` object\n * @apiError (401) {Object} {status: false, message: message}\n **/\n\n\n```"
					},
					"response": []
				},
				{
					"name": "api/user/update/:user_id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/user/update/:user_id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"update",
								":user_id"
							],
							"variable": [
								{
									"key": "user_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n\n/**\n * @api {put} /users/update:user_id\n * @apiName Update user - if user.role == admin, possible to update all;\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} [password] password - auto hash when update\n * @apiImmutableParam  {String} [role] enum [user, admin] from Schema immutable:true/false\n * @apiImmutableParam {String} [username] username from Schema immutable:true/false\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiFixing if user_id is different then the authenticated user's id,\n * ignoring the user_id parameter and continue with user own id.{userid = username from JWTtoken}\n *\n * @apiSuccess (200) {Object} mixed `User` object\n * @apiError (200) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "signals",
			"item": []
		},
		{
			"name": "scores",
			"item": []
		},
		{
			"name": "chat",
			"item": [
				{
					"name": "dialog",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluQGhjaXNzLmlvIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjQ4MjI3NzM0LCJleHAiOjE2NDgyMzEzMzR9.PInLpvTPVmPMzTOKuqbd-y7bkOkTyimpaJKI4_xQDyA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userId",
									"value": "1",
									"type": "text"
								},
								{
									"key": "message",
									"value": "what is your name?",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://rest.hciss.io:5003/api/chat?userId=1&message=Hello",
							"protocol": "http",
							"host": [
								"rest",
								"hciss",
								"io"
							],
							"port": "5003",
							"path": [
								"api",
								"chat"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "message",
									"value": "Hello"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}